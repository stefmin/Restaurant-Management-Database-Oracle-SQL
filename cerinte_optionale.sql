
-- 14

-- Afiseaza performanta angajatilor si performanta lor in raport cu salariul
-- Sunt permise: SELECT, UPDATE (pe coloane simple, care nu sunt derivate sau calculate), MERGE (in situatiile similare cu UPDATE)
-- Nu sunt permise: INSERT, DELETE, UPDATE (pe coloane calculate), MERGE (inserarea prin merge, sau update-uri pe coloane derivate)

CREATE OR REPLACE VIEW V_Performanta_Angajati AS
SELECT
    A.ID_ANGAJAT,
    A.NUME || ' ' || A.PRENUME AS NUME,
    NVL(A.SALARIU, 2500) AS SASLARIU,
    A.FUNCTIE,

    (
        SELECT COUNT(*)
        FROM COMENZI C
        WHERE C.ID_PERSONAL_RESTAURANT = A.ID_ANGAJAT
    ) AS NR_COMENZI_PROCESATE,

    CASE
        WHEN A.SALARIU > (
            SELECT AVG(SALARIU) FROM ANGAJATI
            WHERE SALARIU IS NOT NULL
        ) THEN 'Peste medie'
        ELSE 'Sub medie'
    END AS CATEGORIE_SALARIU

FROM ANGAJATI A
WHERE A.FUNCTIE IN ('chelner', 'barman')
ORDER BY NR_COMENZI_PROCESATE DESC
WITH CHECK OPTION;


--15

-- OUTER-JOIN

-- Afiseaza numarul de sali, angajati, animatori si clienti care nu au fost implicati in evenimente
-- in vederea planificarii unui viitor eveniment cu acestia

SELECT TIP, COUNT(*) AS NUMAR
FROM (
    SELECT 'SALA FARA EVENIMENT' AS TIP
    FROM SALI S
    LEFT JOIN PLANIFICARI_ORGANIZATORICE PO ON S.ID_SALA = PO.ID_SALA
    WHERE PO.ID_EVENIMENT IS NULL

    UNION ALL

    SELECT 'ANGAJAT FARA EVENIMENT' AS TIP
    FROM ANGAJATI A
    LEFT JOIN PLANIFICARI_ORGANIZATORICE PO ON A.ID_ANGAJAT = PO.ID_ANGAJAT
    WHERE PO.ID_EVENIMENT IS NULL

    UNION ALL

    SELECT 'ANIMATOR FARA EVENIMENT' AS TIP
    FROM ANIMATORI AM
    LEFT JOIN COLABORARI C ON AM.ID_ANIMATOR = C.ID_ANIMATOR
    WHERE C.ID_EVENIMENT IS NULL

    UNION ALL

    SELECT 'CLIENT FARA EVENIMENT' AS TIP
    FROM CLIENTI CL
    LEFT JOIN INVITATI_EVENIMENT IE ON CL.ID_CLIENT = IE.ID_CLIENT
    LEFT JOIN PARTICIPARI_EVENIMENTE PE ON PE.ID_INVITAT_EVENIMENT = IE.ID_INVITAT_EVENIMENT
    WHERE PE.ID_EVENIMENT IS NULL
)
GROUP BY TIP;


-- DIVISION

-- Afiseaza meniurile care sunt servite la toate aniversarile (evenimente de tip aniversare)

SELECT M.ID_MENIU
FROM MENIURI M
WHERE NOT EXISTS (
    SELECT E.ID_EVENIMENT
    FROM EVENIMENTE E
    WHERE E.TIP_EVENIMENT = 'aniversare'
    MINUS
    SELECT ME.ID_EVENIMENT
    FROM MENIURI_EVENIMENTE ME
    WHERE ME.ID_MENIU = M.ID_MENIU
);

-- TOP-N

-- cele mai scumpe 5 produse din top 3 meniuri care au fost servite la cele mai multe evenimente

WITH TOP_MENIURI AS (
    SELECT *
    FROM (
        SELECT ME.ID_MENIU AS ID_MENIU, COUNT(*) AS NR_EVENIMENTE
        FROM MENIURI_EVENIMENTE ME
        GROUP BY ME.ID_MENIU
        ORDER BY NR_EVENIMENTE DESC
    )
    WHERE ROWNUM <= 3 
)
SELECT *
FROM (
    SELECT PI.ID_PRODUS_INVENTAR, PI.NUME_PRODUS, PI.PRET_UNITAR, PI.ID_MENIU
    FROM PRODUSE_INVENTAR PI
    WHERE PI.ID_MENIU IN (SELECT ID_MENIU FROM TOP_MENIURI)
    ORDER BY PI.PRET_UNITAR DESC 
)
WHERE ROWNUM <= 5;

-- 16 (b)

--inainte

EXPLAIN PLAN FOR
SELECT C.NUME || ' ' || C.PRENUME AS NUME,
(
    SELECT COUNT(*)
    FROM COMENZI CM2
    WHERE CM2.ID_CLIENT_ONLINE = CO.ID_CLIENT_ONLINE
) AS COMENZI_TOTALE,
(
    SELECT SUM(CM2.PRET)
    FROM COMENZI CM2
    WHERE CM2.ID_CLIENT_ONLINE = CO.ID_CLIENT_ONLINE
) AS PRET_TOTAL
FROM CLIENTI_ONLINE CO
LEFT JOIN COMENZI CM ON CO.ID_CLIENT_ONLINE = CM.ID_CLIENT_ONLINE
JOIN CLIENTI C ON CO.ID_CLIENT = C.ID_CLIENT
WHERE CO.ID_CLIENT_ONLINE IS NOT NULL
GROUP BY C.NUME, C.PRENUME, CO.ID_CLIENT_ONLINE
ORDER BY CO.ID_CLIENT_ONLINE;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- dupa

CREATE INDEX IDX_COMENZI_CLIENT ON COMENZI(ID_CLIENT_ONLINE);

EXPLAIN PLAN FOR
SELECT /*+ INDEX(CM IDX_COMENZI_CLIENT) */
    C.NUME || ' ' || C.PRENUME AS NUME,
    COUNT(CM.ID_COMANDA) AS COMENZI_TOTALE,
    SUM(CM.PRET) AS PRET_TOTAL
FROM CLIENTI_ONLINE CO
JOIN CLIENTI C ON CO.ID_CLIENT = C.ID_CLIENT
LEFT JOIN COMENZI CM ON CO.ID_CLIENT_ONLINE = CM.ID_CLIENT_ONLINE
GROUP BY C.NUME, C.PRENUME, CO.ID_CLIENT_ONLINE
ORDER BY CO.ID_CLIENT_ONLINE;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);