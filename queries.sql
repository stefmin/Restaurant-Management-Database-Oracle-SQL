
-- 12.

-- 1. Nr. comenzi si suma lor pentru fiecare client online

SELECT C.NUME || ' ' || C.PRENUME AS NUME,
(
    SELECT COUNT(*)
    FROM COMENZI CM2
    WHERE CM2.ID_CLIENT_ONLINE = CO.ID_CLIENT_ONLINE
) AS COMENZI_TOTALE,
(
    SELECT SUM(CM2.PRET)
    FROM COMENZI CM2
    WHERE CM2.ID_CLIENT_ONLINE = CO.ID_CLIENT_ONLINE
) AS PRET_TOTAL
FROM CLIENTI_ONLINE CO
LEFT JOIN COMENZI CM ON CO.ID_CLIENT_ONLINE = CM.ID_CLIENT_ONLINE
JOIN CLIENTI C ON CO.ID_CLIENT = C.ID_CLIENT
WHERE CO.ID_CLIENT_ONLINE IS NOT NULL
GROUP BY C.NUME, C.PRENUME, CO.ID_CLIENT_ONLINE
ORDER BY CO.ID_CLIENT_ONLINE;

-- 2. Meseni ale căror plăți totale depășesc media valorii plăților mesenilor făcute cu Cash

SELECT C.NUME || ' ' || C.PRENUME AS NUME,
(
    SELECT COUNT(*)
    FROM NOTE_PLATA NP2
    WHERE NP2.ID_MESEAN = M.ID_MESEAN
) AS PLATI_TOTALE,
(
    SELECT SUM(NP2.VALOARE_TOTALA)
    FROM NOTE_PLATA NP2
    WHERE NP2.ID_MESEAN = M.ID_MESEAN
) AS PRET_TOTAL
FROM MESENI M
LEFT JOIN NOTE_PLATA NP ON NP.ID_MESEAN = M.ID_MESEAN
JOIN CLIENTI C ON M.ID_MESEAN = C.ID_CLIENT
WHERE M.ID_MESEAN IS NOT NULL
GROUP BY C.NUME, C.PRENUME, M.ID_MESEAN
HAVING SUM(NP.VALOARE_TOTALA) > (
    SELECT AVG(SUM(VALOARE_TOTALA))
    FROM NOTE_PLATA
    WHERE METODA_PLATA = 'Cash'
    GROUP BY ID_MESEAN
)
ORDER BY M.ID_MESEAN;

-- 3. Persoanele care nu au mai facut demult rezervare in vederea contactarii

WITH REZERVARI_PER_CLIENT AS (
    SELECT 
        M.ID_CLIENT,
        MAX(R.DATA_REZERVARE) AS ULTIMA_REZERVARE
    FROM REZERVARI R
    JOIN MESENI M ON M.ID_MESEAN = R.ID_MESEAN
    GROUP BY M.ID_CLIENT
)
SELECT 
    UPPER(C.NUME || ' ' || C.PRENUME) AS NUME_CLIENT,
    EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM RP.ULTIMA_REZERVARE) AS ANI_TRECUTI,
    FLOOR(ABS(MONTHS_BETWEEN(SYSDATE, RP.ULTIMA_REZERVARE))) AS LUNI_TRECUTE,
    UPPER(
        CASE 
            WHEN ABS(MONTHS_BETWEEN(SYSDATE, RP.ULTIMA_REZERVARE)) < 1 THEN 'RECENT'
            WHEN ABS(MONTHS_BETWEEN(SYSDATE, RP.ULTIMA_REZERVARE)) < 3 THEN 'NU DEMULT'
            ELSE 'REZERVARE VECHE'
        END
    ) AS CATEGORIE_REZERVARE
FROM REZERVARI_PER_CLIENT RP
JOIN CLIENTI C ON RP.ID_CLIENT = C.ID_CLIENT
WHERE MONTHS_BETWEEN(SYSDATE, RP.ULTIMA_REZERVARE) <= 0;


-- 4. Ce retele de telefonie folosesc invitatii care participa la evenimentul care are in observatiile planificarii textul "bar mobil"?

SELECT DISTINCT
    C.ID_CLIENT,
    C.NUME || ' ' || C.PRENUME AS NUME_COMPLET,
    UPPER(SUBSTR(C.NUME, 1, 1)) AS INITIALA_NUME,
    DECODE(SUBSTR(C.NR_TEL, 1, 3),
        '072', 'VODAFONE',
        '073', 'ORANGE',
        '074', 'TELEKOM',
        '076', 'DIGI',
        'ALTĂ REȚEA') AS RETEA_TELEFON
FROM PLANIFICARI_ORGANIZATORICE PO
LEFT JOIN PARTICIPARI_EVENIMENTE PE ON PO.ID_EVENIMENT = PE.ID_EVENIMENT
JOIN INVITATI_EVENIMENT IE ON IE.ID_INVITAT_EVENIMENT = PE.ID_INVITAT_EVENIMENT
JOIN CLIENTI C ON C.ID_CLIENT = IE.ID_CLIENT
WHERE LOWER(PO.OBSERVATII) LIKE '%responsabil%';

-- 5. Ordinea meniurilor dupa media de pret

SELECT M.DENUMIRE, STAT.MEDIA_MENIU
FROM (
    SELECT P.ID_MENIU, ROUND(AVG(P.PRET_UNITAR), 2) AS MEDIA_MENIU
    FROM PRODUSE_INVENTAR P
    GROUP BY P.ID_MENIU
) STAT
JOIN MENIURI M ON STAT.ID_MENIU = M.ID_MENIU
WHERE STAT.MEDIA_MENIU > (
    SELECT AVG(PRET_UNITAR) FROM PRODUSE_INVENTAR
);

-- 13.
-- Suprimare

-- 1

UPDATE CLIENTI C
SET MAIL = MAIL || '.inactiv@inactiv.com'
WHERE ID_CLIENT IN (
    SELECT M.ID_CLIENT
    FROM MESENI M
    JOIN REZERVARI R ON R.ID_MESEAN = M.ID_MESEAN
    GROUP BY M.ID_CLIENT
    HAVING MAX(R.DATA_REZERVARE) < ADD_MONTHS(SYSDATE, -12)
);

-- 2

DELETE FROM COMENZI_PRODUSE
WHERE ID_COMANDA IN (
    SELECT ID_COMANDA
    FROM COMENZI
    WHERE STATUS = 'ANULATA'
);

-- DELETE FROM COMENZI
-- WHERE STATUS = 'ANULATA';

-- 3

UPDATE ANGAJATI A
SET SALARIU = SALARIU * 1.10
WHERE A.DATA_ANGAJARE < ADD_MONTHS(SYSDATE, -12)
  AND A.ID_ANGAJAT IN (
    SELECT PO.ID_ANGAJAT
    FROM PLANIFICARI_ORGANIZATORICE PO
    JOIN EVENIMENTE E ON E.ID_EVENIMENT = PO.ID_EVENIMENT
    WHERE E.DATA_EVENIMENT < ADD_MONTHS(SYSDATE, -6)
);


-- 14.

-- Afiseaza performanta angajatilor si performanta lor in raport cu salariul
-- Sunt permise: SELECT, UPDATE (pe coloane simple, care nu sunt derivate sau calculate), MERGE (in situatiile similare cu UPDATE)
-- Nu sunt permise: INSERT, DELETE, UPDATE (pe coloane calculate), MERGE (inserarea prin merge, sau update-uri pe coloane derivate)

CREATE OR REPLACE VIEW V_Performanta_Angajati AS
SELECT
    A.ID_ANGAJAT,
    A.NUME || ' ' || A.PRENUME AS NUME,
    NVL(A.SALARIU, 2500) AS SASLARIU,
    A.FUNCTIE,

    (
        SELECT COUNT(*)
        FROM COMENZI C
        WHERE C.ID_PERSONAL_RESTAURANT = A.ID_ANGAJAT
    ) AS NR_COMENZI_PROCESATE,

    CASE
        WHEN A.SALARIU > (
            SELECT AVG(SALARIU) FROM ANGAJATI
            WHERE SALARIU IS NOT NULL
        ) THEN 'Peste medie'
        ELSE 'Sub medie'
    END AS CATEGORIE_SALARIU

FROM ANGAJATI A
WHERE A.FUNCTIE IN ('chelner', 'barman')
ORDER BY NR_COMENZI_PROCESATE DESC
WITH CHECK OPTION;


--15.

-- OUTER-JOIN

-- Afiseaza numarul de sali, angajati, animatori si clienti care nu au fost implicati in evenimente
-- in vederea planificarii unui viitor eveniment cu acestia

SELECT TIP, COUNT(*) AS NUMAR
FROM (
    SELECT 'SALA FARA EVENIMENT' AS TIP
    FROM SALI S
    LEFT JOIN PLANIFICARI_ORGANIZATORICE PO ON S.ID_SALA = PO.ID_SALA
    WHERE PO.ID_EVENIMENT IS NULL

    UNION ALL

    SELECT 'ANGAJAT FARA EVENIMENT' AS TIP
    FROM ANGAJATI A
    LEFT JOIN PLANIFICARI_ORGANIZATORICE PO ON A.ID_ANGAJAT = PO.ID_ANGAJAT
    WHERE PO.ID_EVENIMENT IS NULL

    UNION ALL

    SELECT 'ANIMATOR FARA EVENIMENT' AS TIP
    FROM ANIMATORI AM
    LEFT JOIN COLABORARI C ON AM.ID_ANIMATOR = C.ID_ANIMATOR
    WHERE C.ID_EVENIMENT IS NULL

    UNION ALL

    SELECT 'CLIENT FARA EVENIMENT' AS TIP
    FROM CLIENTI CL
    LEFT JOIN INVITATI_EVENIMENT IE ON CL.ID_CLIENT = IE.ID_CLIENT
    LEFT JOIN PARTICIPARI_EVENIMENTE PE ON PE.ID_INVITAT_EVENIMENT = IE.ID_INVITAT_EVENIMENT
    WHERE PE.ID_EVENIMENT IS NULL
)
GROUP BY TIP;


-- DIVISION

-- Afiseaza meniurile care sunt servite la toate aniversarile (evenimente de tip aniversare)

SELECT M.ID_MENIU
FROM MENIURI M
WHERE NOT EXISTS (
    SELECT E.ID_EVENIMENT
    FROM EVENIMENTE E
    WHERE E.TIP_EVENIMENT = 'aniversare'
    MINUS
    SELECT ME.ID_EVENIMENT
    FROM MENIURI_EVENIMENTE ME
    WHERE ME.ID_MENIU = M.ID_MENIU
);

-- TOP-N

-- cele mai scumpe 5 produse din top 3 meniuri care au fost servite la cele mai multe evenimente

WITH TOP_MENIURI AS (
    SELECT *
    FROM (
        SELECT ME.ID_MENIU AS ID_MENIU, COUNT(*) AS NR_EVENIMENTE
        FROM MENIURI_EVENIMENTE ME
        GROUP BY ME.ID_MENIU
        ORDER BY NR_EVENIMENTE DESC
    )
    WHERE ROWNUM <= 3 
)
SELECT *
FROM (
    SELECT PI.ID_PRODUS_INVENTAR, PI.NUME_PRODUS, PI.PRET_UNITAR, PI.ID_MENIU
    FROM PRODUSE_INVENTAR PI
    WHERE PI.ID_MENIU IN (SELECT ID_MENIU FROM TOP_MENIURI)
    ORDER BY PI.PRET_UNITAR DESC 
)
WHERE ROWNUM <= 5;

-- 16 (b)

--inainte

EXPLAIN PLAN FOR
SELECT C.NUME || ' ' || C.PRENUME AS NUME,
(
    SELECT COUNT(*)
    FROM COMENZI CM2
    WHERE CM2.ID_CLIENT_ONLINE = CO.ID_CLIENT_ONLINE
) AS COMENZI_TOTALE,
(
    SELECT SUM(CM2.PRET)
    FROM COMENZI CM2
    WHERE CM2.ID_CLIENT_ONLINE = CO.ID_CLIENT_ONLINE
) AS PRET_TOTAL
FROM CLIENTI_ONLINE CO
LEFT JOIN COMENZI CM ON CO.ID_CLIENT_ONLINE = CM.ID_CLIENT_ONLINE
JOIN CLIENTI C ON CO.ID_CLIENT = C.ID_CLIENT
WHERE CO.ID_CLIENT_ONLINE IS NOT NULL
GROUP BY C.NUME, C.PRENUME, CO.ID_CLIENT_ONLINE
ORDER BY CO.ID_CLIENT_ONLINE;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- dupa

CREATE INDEX IDX_COMENZI_CLIENT ON COMENZI(ID_CLIENT_ONLINE);

EXPLAIN PLAN FOR
SELECT /*+ INDEX(CM IDX_COMENZI_CLIENT) */
    C.NUME || ' ' || C.PRENUME AS NUME,
    COUNT(CM.ID_COMANDA) AS COMENZI_TOTALE,
    SUM(CM.PRET) AS PRET_TOTAL
FROM CLIENTI_ONLINE CO
JOIN CLIENTI C ON CO.ID_CLIENT = C.ID_CLIENT
LEFT JOIN COMENZI CM ON CO.ID_CLIENT_ONLINE = CM.ID_CLIENT_ONLINE
GROUP BY C.NUME, C.PRENUME, CO.ID_CLIENT_ONLINE
ORDER BY CO.ID_CLIENT_ONLINE;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);


-- 17 (b)

CREATE MATERIALIZED VIEW MV_DETALII_COMENZI_PRODUSE
REFRESH COMPLETE ON DEMAND
AS
SELECT
    -- Coloane din tabela COMENZI
    C.id_comanda AS comanda_id,
    C.data_comanda AS comanda_data,
    C.ora_livrare AS comanda_ora_livrare,
    C.status AS comanda_status,
    C.pret AS comanda_pret_total,
    C.id_distribuitor AS comanda_distribuitor,
    C.id_logistician AS comanda_logistician,
    C.id_personal_restaurant AS comanda_personal_restaurant,
    C.id_client_online AS comanda_id_client_online,

    -- Coloane din tabela COMENZI_PRODUSE
    -- CP.id_comanda AS cp_comanda_id, 
    -- CP.id_produs_inventar AS cp_produs_inventar_id,

    -- Coloane din tabela PRODUSE_INVENTAR
    PI.id_produs_inventar AS produs_inventar_id, 
    PI.nume_produs AS produs_inventar_nume,
    PI.cantitate AS produs_inventar_cantitate_stoc,
    PI.unitate_masura AS produs_inventar_unitate_masura,
    PI.pret_unitar AS produs_inventar_pret_unitar,
    PI.id_meniu AS produs_inventar_id_meniu_asociat 
FROM
    COMENZI C
JOIN
    COMENZI_PRODUSE CP ON C.id_comanda = CP.id_comanda
JOIN
    PRODUSE_INVENTAR PI ON CP.id_produs_inventar = PI.id_produs_inventar;


-- Cerinta_prezentare
--2

CREATE OR REPLACE VIEW V_PRet_modificat AS
SELECT DC.ID_NOTA_PLATA, SUM(DC.PRET) AS SUMA_PRET_COMANDA
FROM DETALII_COMANDA DC
GROUP BY DC.ID_NOTA_PLATA